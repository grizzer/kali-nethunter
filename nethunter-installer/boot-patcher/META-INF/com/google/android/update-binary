#!/sbin/sh
# NetHunter kernel installer backend

## start build generated variables
kernel_string=
kernel_author=
kernel_version=
device_names=
generic=
## end build generated variables

[ "$3" ] && {
	zip=$3
	console=/proc/$$/fd/$2
	# write the location of the console buffer to /tmp/console for other scripts to use
	echo "$console" > /tmp/console
} || {
	console=$(cat /tmp/console)
	[ "$console" ] || console=/proc/$$/fd/1
}

tmp=/tmp/nethunter/boot-patcher

print() {
	echo "ui_print $1" > $console
	echo
}

abort() {
	[ "$1" ] && {
		print "Error: $1"
		print "Aborting..."
	}
	cleanup
	print "Failed to patch boot image!"
	exit 1
}

cleanup() {
	rm /system/.rw
	rm /data/.rw

	umount /system
	umount /data

	[ "$zip" ] && rm /tmp/console
}

install() {
	cp -r "$tmp$1" "$(dirname "$1")"
}

extract() {
	rm -rf "$2"
	mkdir -p "$2"
	unzip -o "$1" -d "$2"
}

setperm() {
	find "$3" -type d -exec chmod "$1" {} \;
	find "$3" -type f -exec chmod "$2" {} \;
}

mount() {
	mountpoint -q "$1" || /sbin/busybox mount -o rw "$1" || abort "Unable to mount $1 as rw!"
	>> "$1/.rw" && return || /sbin/busybox mount -o remount,rw "$1"
	>> "$1/.rw" && return || abort "Unable to write to $1!"
}

print "######################################################"
print "              NetHunter Kernel Installer"
[ "$generic" ] && {
	print "    for $generic devices - ramdisk modifications only"
} || {
	print " $kernel_string by $kernel_author (version: $kernel_version)"
}
print "######################################################"

command -v getprop || {
	print "Warning: getprop not found! Skipping device check!"
	unset device_names
}

[ "$device_names" ] && {
	print "Checking device compatibility..."
	match=0
	ro_product_device="$(getprop ro.product.device)"
	ro_product_model="$(getprop ro.product.model)"
	ro_build_product="$(getprop ro.build.product)"
	for i in $device_names; do
		[ "$ro_product_device" = "$i" -o "$ro_product_model" = "$i" -o "$ro_build_product" = "$i" ] && match=1
	done
	[ $match != 1 ] && abort "Unsupported device"
}

# Unpack the installer
[ "$zip" ] && {
	print "Unpacking the installer, this may take a while..."
	extract "$zip" "$tmp"
}
cd "$tmp"

. env.sh

mount /system
mount /data

setperm 0755 0755 "$tmp/tools"

# Install additional busybox applets to /sbin in case something is missing during installation
print "Installing busybox applets to /sbin"
cp ramdisk-patch/sbin/busybox_nh /sbin/
chmod 755 /sbin/busybox_nh
/sbin/busybox_nh --install /sbin

# Free up space for kernel only install (otherwise nothing installs!)
# It actually runs twice when part of the NetHunter updater zip
print "Freeing some space on /system"
sh tools/cleansystem.sh

[ -d "$tmp/system/etc/firmware" ] && {
	print "Copying firmware to /system/etc/firmware"
	setperm 0755 0644 "$tmp/system/etc/firmware"
	install "/system/etc/firmware"
}

[ -d "$tmp$LIBDIR" ] && {
	print "Copying shared libraries and kernel modules to $LIBDIR"
	setperm 0755 0755 "$tmp$LIBDIR"
	install "$LIBDIR"
}

[ -d "$tmp/system/bin" ] && {
	print "Installing /system/bin binaries"
	setperm 0755 0755 "$tmp/system/bin"
	install "/system/bin"
}

[ -d "$tmp/system/xbin" ] && {
	print "Installing /system/xbin binaries"
	setperm 0755 0755 "$tmp/system/xbin"
	install "/system/xbin"
}

[ -d "$tmp/data/local" ] && {
	print "Copying additional files to /data/local"
	setperm 0755 0644 "$tmp/data/local"
	install "/data/local"
}

print "Running boot image patcher..."
sh boot-patcher.sh || abort

cleanup
print "Boot image patching complete"
